#!/usr/bin/env python
import defopt
from pathlib import Path
import json
import os.path


def prep(*, config: Path):
    """
    Prepare
    :param config: JSON configuration file
    """
    # read the config file
    with config.open('r') as f:
        meta = json.load(f)

    # runs some checks
    if not "project_dir" in meta:
        raise RuntimeError("need to have a project directory")
    if not os.path.isdir(meta["project_dir"]):
        raise RuntimeError(f"file {meta['project_dir']} is not a directory")
    if not "run_dir" in meta:
        raise RuntimeError("need to have a run directory")

    # create the output directory
    p = Path(meta['run_dir'])
    p.mkdir(parents=True, exist_ok=True)

    # create R script
    r_script = f"""
library(SWATplusR)
library(dplyr)

project_dir <- 
n <- {meta['sim']['n']}
n_threads <- {meta['sim']['n_thread']}
set.seed({meta['sim']['seed']})
param <- tibble("""
    nvar = len(meta['sim']['var'])
    count = 0
    for var, elem in meta['sim']['var'].items():
        chg = elem['change']
        val = elem['val']
        r_script += f"""\'{var} | change = {chg}\' = {val}"""
        if count < nvar - 1:
            r_script += ', '
        count += 1
    r_script += ')\n'
    r_script += f"""
sim <- run_swat2012(project_path = \'{meta['project_dir']}\',
                    output = list(q=dfine_output(file = \'rch\',
                              variable = 'FLOW_OUT', unit=1:3)),
                              parameter = param,
                              n_thread = n_thread)

save(sim, file = \'{meta['run_dir']}/result.RData\')
"""
    print(r_script)
    


def run(*, config: Path, nprocs: int=1):
    """
    Run
    :param config: configuration file
    :param nprocs: number of processes
    """
    # read the config file
    with config.open('r') as f:
        meta = json.load(f)

    # create the SWATPlusR scripts

    # create the SLURM scripts



def analyse(*, config: Path):
    """
    Analyse the results
    :param config: configuration file
    """
    pass


if __name__ == '__main__':
    defopt.run([prep, run, analyse])
