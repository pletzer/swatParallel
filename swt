#!/usr/bin/env python
import defopt
from pathlib import Path
import json
import os
import shutil
import subprocess
import stat



def distribute_samples(n_samples, n_workers):
    n_local = n_samples // n_workers
    res = [n_local for i in range(n_workers)]
    n_remainder = n_samples % n_workers
    for i in range(n_remainder):
        res[i] += 1
    return res


def remove_executables_in_dir(directory):
    executable = stat.S_IEXEC | stat.S_IXGRP | stat.S_IXOTH
    for filename in os.listdir(directory):
        if os.path.isfile(filename):
            st = os.stat(filename)
            mode = st.st_mode
            if mode & executable:
                os.remove(filename)    


def clean(*, config: Path):
    """
    Clean the experiment
    :param config: JSON configuration file
    """
    # read the config file
    with config.open('r') as f:
        meta = json.load(f)

    shutil.rmtree(Path(meta['run_dir']))



def prep(*, config: Path):
    """
    Prepare
    :param config: JSON configuration file
    """
    # read the config file
    with config.open('r') as f:
        meta = json.load(f)

    # runs some checks
    if not "project_dir" in meta:
        raise RuntimeError("need to have a project directory")
    if not os.path.isdir(meta["project_dir"]):
        raise RuntimeError(f"file {meta['project_dir']} is not a directory")
    if not "run_dir" in meta:
        raise RuntimeError("need to have a run directory")

    n_workers = meta['sim']['n_workers']
    n_samples = meta['sim']['n_samples']
    n_variables = len(meta['sim']['var'])
    n_local_samples = distribute_samples(n_samples, n_workers)
    for worker_id in range(n_workers):
        r_script = f"""
library(SWATplusR)
library(dplyr)
n_samples <- {n_local_samples[worker_id]}
set.seed({meta['sim']['seed']} + {worker_id})
param <- tibble("""
        var_id = 0
        for var, elem in meta['sim']['var'].items():
            chg = elem['change']
            val = elem['val']
            if var_id > 0:
                # insert comma
                r_script += ',\n\t'
            r_script += f"""\'{var} | change = {chg}\' = {val}"""
            if var_id == n_variables - 1:
                r_script += ")"
            var_id += 1

        # copy the files to the worker run directory
        worker_id_str = str(worker_id).zfill(4)
        worker_run_path = Path(meta['run_dir']) / Path(f'worker_{worker_id_str}')
        shutil.copytree(meta['project_dir'], worker_run_path)

        var_name, var_file = meta['sim']['output']['var'].split('.')
        units = meta['sim']['output']['units']

        r_script += f"""
res <- run_swat2012(project_path = \'{worker_run_path}\',
                    output = list(q=define_output(file = \'{var_file}\',
                              variable = \'{var_name}\', unit={units})),
                    parameter = param,
                    n_thread = {meta['sim']['n_threads_per_worker']})
save(res, file = \'{worker_run_path}/result.RData\')
"""
        with open(worker_run_path / Path(f'run.R'), 'w') as f:
            f.write(r_script)


def run(*, config: Path, nprocs: int=1):
    """
    Run
    :param config: configuration file
    :param nprocs: number of processes
    """
    # read the config file
    with config.open('r') as f:
        meta = json.load(f)


    # remove any executable file 
    remove_executables_in_dir(meta['run_dir'])

    # copy the executable over to the run directory
    shutil.copy(meta['swat_exec'], Path(meta['run_dir']) / Path('swat'))

    # run
    exe = Path(meta['run_dir']) / Path('run.R')
    subprocess.run(["Rscript", exe])



def analyse(*, config: Path):
    """
    Analyse the results
    :param config: configuration file
    """
    pass


if __name__ == '__main__':
    defopt.run([clean, prep, run, analyse])
